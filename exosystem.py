""" This program evaluates the deflection of light due to the mean exoplanet
where the mean values are taken from the catalogue.

Creator: mattiafalco
Date: 13/04/22 
"""

import numpy as np
import pandas as pd
from astronavigation.planets import SolarSystem, Body
from astropy import constants
from astronavigation.deflection import *

# Define constants
pc = constants.pc.to('km').value
AU = constants.au.to('km').value
c = constants.c.to('km/s').value
eps = 1/c

# create solar system and jupiter
ss = SolarSystem()
jupiter = ss.getPlanet('jupiter')
sun = ss.getSun()

v_null = np.array([0, 0, 0])

# print mean values
path = 'exo_archive.csv'
catalogue = pd.read_csv(path)
mean_val = catalogue.mean(numeric_only=True)
print('catalogue mean values:')
print(mean_val)

# now we estimate the deflection generated by the mean planet
# we center the coordinate system into the star of the exosystem
planet = Body(mass=mean_val['pl_massj']*jupiter.mass,
          pos=mean_val['pl_orbsmax']*AU*np.array([0, 1, 0]),
          radius=mean_val['pl_radj']*jupiter.radius)
# mean star
star = Body(mass=mean_val['st_mass']*sun.mass,
            pos=np.array([0, 0, 0]),
            radius=mean_val['st_rad']*sun.radius)

# observer
x_obs = AU*np.array([0, -1, 0])

# target
dist = mean_val['sy_dist'] * pc

for pl in [star, planet]:
    # impact angle
    chi = pl.radius / np.linalg.norm(x_obs - pl.pos)


    # direction
    l0 = -np.array([np.sin(chi), np.cos(chi), 0])
    x = -dist*l0 + x_obs

    # deflection
    dls = deflection(l0, x, pl.pos, x_obs, eps, v_null, pl.mass)
    dl1 = np.linalg.norm(dls)

    print('\n-------------------------------')
    print(f'deflection: {np.rad2deg(dl1)*3600*1e6} muas')
    print(f'dr: {dist*dl1/AU} AU')


